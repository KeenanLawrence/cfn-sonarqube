{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Conditions": {
    "AssignInstanceRole": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "InstanceProfile" }, "" ] }
      ]
    },
    "AssignPublicIp": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "NoPublicIp" }, "true" ] }
      ]
    },
    "CreateAppVolume": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "AppVolumeDevice" }, "" ] }
      ]
    },
    "Reboot": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "NoReboot" }, "true" ] }
      ]
    },
    "UseCfnUrl": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "CfnEndpointUrl" }, "" ] }
      ]
    }
  },
  "Description": "This template deploys a standalone Linux instance to host a SonarQube node.",
  "Metadata": {
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [
        {
          "Label": {
            "default": "Instance Attributes"
          },
          "Parameters": [
            "Hostname",
            "Domainname",
            "AmiId",
            "InstanceType",
            "SubnetIds",
            "NoPublicIp",
            "ProvisionUser",
            "KeyPairName",
            "AdminPubkeyURL",
            "SecurityGroupIds",
            "InstanceProfile",
            "NoReboot"
          ]
        },
        {
          "Label": {
            "default": "Application Info"
          },
          "Parameters": [
            "SonarSrcUrl",
            "SonarInitSetupUrl",
            "SonarAppSetupUrl",
            "SonarUser",
            "AppVolumeSize",
            "AppVolumeType",
            "AppVolumeDevice",
            "AppVolumeMountPath"
          ]
        },
        {
          "Label": {
            "default": "DB Connection Info"
          },
          "Parameters": [
            "SonarDbHost",
            "SonarDbInst",
            "SonarDbUser",
            "SonarDbPass"
          ]
        }
      ],
      "ParameterLabels": {
        "AdminPubkeyURL": {
          "default": "Supplemental admin SSH Keys"
        },
        "AppVolumeDevice": {
          "default": "Sonarqube $HOME dev-node"
        },
        "AppVolumeMountPath": {
          "default": "Sonarqube $HOME location"
        },
        "AppVolumeSize": {
          "default": "Sonarqube $HOME size"
        },
        "AppVolumeType": {
          "default": "Sonarqube $HOME EBS type"
        },
        "KeyPairName": {
          "default": "Default login's SSH Key"
        },
        "NoPublicIp": {
          "default": "Disable public IP"
        },
        "NoReboot": {
          "default": "Disable auto-reboot"
        },
        "ProvisionUser": {
          "default": "Default login account"
        },
        "SonarDbHost": {
          "default": "Database FQDN"
        },
        "SonarDbInst": {
          "default": "Database Instance-name"
        },
        "SonarDbUser": {
          "default": "Database master-user"
        },
        "SonarDbPass": {
          "default": "Database master password"
        },
        "SonarSrcUrl": {
          "default": "URL of Sonarqube ZIP"
        },
        "SonarInitSetupUrl": {
          "default": "URL of Sonarqube pre-config script"
        },
        "SonarAppSetupURL": {
          "default": "URL of Sonarqube app-config script"
        }
      }
    }
  },
  "Parameters": {
    "SonarDbHost": {
      "Description": "FQDN of the Sonarqube database.",
      "Type": "String"
    },
    "SonarDbInst": {
      "Description": "Instance-name of the Sonarqube database.",
      "Type": "String"
    },
    "SonarDbPass": {
      "Description": "Password of the Sonarqube master database-user.",
      "Type": "String"
    },
    "SonarDbUser": {
      "Description": "Name of the Sonarqube master database-user.",
      "Type": "String"
    },
    "SonarAppSetupUrl": {
      "AllowedPattern": "^$|^http://.*$|^https://.*$",
      "Description": "URL of the Sonarqube setup script.",
      "Type": "String"
    },
    "SonarInitSetupUrl": {
      "AllowedPattern": "^$|^http://.*$|^https://.*$",
      "Description": "URL of the Sonarqube service setup script.",
      "Type": "String"
    },
    "SonarSrcUrl": {
      "AllowedPattern": "^$|^http://.*$|^https://.*$",
      "Description": "URL of the Sonarqube ZIP-bundle.",
      "Type": "String"
    },
    "SonarUser": {
      "Description": "Userid the Sonarqube service runs under.",
      "Default": "sonarqube",
      "Type": "String"
    },
    "AdminPubkeyURL": {
      "AllowedPattern": "^$|^http://.*$|^https://.*$",
      "Description": "URL the file containing the admin users' SSH public keys.",
      "Type": "String"
    },
    "AmiId": {
      "AllowedPattern": "^ami-[0-9a-z]{8}$|^ami-[0-9a-z]{17}$",
      "Description": "ID of the AMI to launch",
      "Type": "String"
    },
    "AppVolumeDevice": {
      "AllowedValues": [
        "",
        "/dev/xvdf",
        "/dev/xvdg",
        "/dev/xvdh",
        "/dev/xvdi",
        "/dev/xvdj"
      ],
      "Default": "",
      "Description": "Device to mount an extra EBS volume. Leave blank to launch without an extra application volume",
      "Type": "String"
    },
    "AppVolumeMountPath": {
      "AllowedPattern": "/.*",
      "Default": "/home/sonarqube",
      "Description": "Filesystem path to mount the extra app volume. Ignored if \"AppVolumeDevice\" is blank",
      "Type": "String"
    },
    "AppVolumeSize": {
      "ConstraintDescription": "Must be between 10GB and 16384GB.",
      "Default": "10",
      "Description": "Size in GB of the EBS volume to create. Ignored if \"AppVolumeDevice\" is blank",
      "MaxValue": "16384",
      "MinValue": "10",
      "Type": "Number"
    },
    "AppVolumeType": {
      "AllowedValues": [
        "gp2",
        "io1",
        "sc1",
        "st1",
        "standard"
      ],
      "Default": "gp2",
      "Description": "Type of EBS volume to create. Ignored if \"AppVolumeDevice\" is blank",
      "Type": "String"
    },
    "BackupBucket": {
      "Description": "Name of S3 bucket used for Sonarqube backup tasks.",
      "Type": "String"
    },
    "Domainname": {
      "ConstraintDescription": "An alphanumeric string to complete the domain portion of the instance's FQDN.",
      "Description": "Suffix for Sonarqube's hostname and DNS record",
      "Type": "String"
    },
    "Hostname": {
      "ConstraintDescription": "An alphanumeric string to complete the hostname portion of the instance's FQDN.",
      "Default": "sonarqube",
      "Description": "Node-name for Sonarqube's hostname and DNS record",
      "Type": "String"
    },
    "InstanceProfile": {
      "Description": "IAM instance profile to apply to the instance(s)",
      "Type": "String"
    },
    "CfnEndpointUrl": {
      "AllowedPattern": "^$|^http://.*$|^https://.*$",
      "Default": "",
      "Description": "URL to the CloudFormation Endpoint. e.g. https://cloudformation.us-east-1.amazonaws.com",
      "Type": "String"
    },
    "EpelRepo": {
      "AllowedPattern": "^[a-z][a-z0-9-]*$",
      "ConstraintDescription": "An alphanumeric string that represents the EPEL yum repo's label.",
      "Default": "epel",
      "Description": "Name of network's EPEL repo.",
      "Type": "String"
    },
    "InstanceType": {
      "AllowedValues": [
        "t2.micro",
        "t2.small",
        "t2.medium",
        "t2.large",
        "t2.xlarge",
        "t2.2xlarge",
        "m3.medium",
        "m3.large",
        "m3.xlarge",
        "m3.2xlarge",
        "m4.large",
        "m4.xlarge",
        "m4.2xlarge",
        "m4.4xlarge",
        "m4.10xlarge",
        "m4.16xlarge",
        "c3.large",
        "c3.xlarge",
        "c3.2xlarge",
        "c3.4xlarge",
        "c3.8xlarge",
        "c4.large",
        "c4.xlarge",
        "c4.2xlarge",
        "c4.4xlarge",
        "c4.8xlarge"
      ],
      "Default": "t2.large",
      "Description": "Amazon EC2 instance type",
      "Type": "String"
    },
    "KeyPairName": {
      "Description": "Public/private key pairs allowing the provisioning-user to securely connect to the instance after it launches.",
      "Type": "AWS::EC2::KeyPair::KeyName"
    },
    "NoPublicIp": {
      "AllowedValues": [
        "false",
        "true"
      ],
      "Default": "true",
      "Description": "Controls whether to assign the instance a public IP. Recommended to leave at \"true\" _unless_ launching in a public subnet",
      "Type": "String"
    },
    "NoReboot": {
      "AllowedValues": [
        "false",
        "true"
      ],
      "Default": "false",
      "Description": "Controls whether to reboot the instance as the last step of cfn-init execution",
      "Type": "String"
    },
    "PipIndexFips": {
      "AllowedPattern": "^$|^http://.*$|^https://.*$",
      "Default": "https://pypi.org/simple/",
      "Description": "URL of pip index  that is compatible with FIPS 140-2 requirements.",
      "Type": "String"
    },
    "PipRpm": {
      "Default": "python2-pip",
      "Description": "Name of preferred pip RPM.",
      "Type": "String"
    },
    "ProvisionUser": {
      "AllowedPattern": "[a-z0-9]{6,12}+",
      "ConstraintDescription": "Alphanumeric string between 6 and 12 characters.",
      "Default": "sonarbuild",
      "Description": "Default login user account name.",
      "Type": "String"
    },
    "PyStache": {
      "Default": "pystache",
      "Description": "Name of preferred pystache RPM.",
      "Type": "String"
    },
    "SecurityGroupIds": {
      "Description": "List of security groups to apply to the instance(s)",
      "Type": "List<AWS::EC2::SecurityGroup::Id>"
    },
    "SubnetIds": {
      "Description": "Subnet to associate to the Instance",
      "Type": "AWS::EC2::Subnet::Id"
    }
  },
  "Resources": {
    "SonarqubeEC2": {
      "CreationPolicy": {
        "ResourceSignal": {
          "Count": "1",
          "Timeout": "PT10M"
        }
      },
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "config": {
            "files": {
              "/etc/cfn/cfn-hup.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[main]\n",
                      "stack=",
                      { "Ref": "AWS::StackId" },
                      "\n",
                      "region=",
                      { "Ref": "AWS::Region" },
                      "\n",
                      {
                        "Fn::If": [
                          "AssignInstanceRole",
                          {
                            "Fn::Join": [
                              "",
                              [
                                "role=",
                                { "Ref": "InstanceProfile" },
                                "\n"
                              ]
                            ]
                          },
                          ""
                        ]
                      },
                      {
                        "Fn::If": [
                          "AssignInstanceRole",
                          {
                            "Fn::Join": [
                              "",
                              [
                                "url=",
                                { "Ref": "CfnEndpointUrl" },
                                "\n"
                              ]
                            ]
                          },
                          ""
                        ]
                      }
                    ]
                  ]
                },
                "group": "root",
                "mode": "000400",
                "owner": "root"
              },
              "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[cfn-auto-reloader-hook]\n",
                      "triggers=post.update\n",
                      "path=Resources.CfnLaunchConfig.Metadata\n",
                      "action=/opt/aws/bin/cfn-init -v -c update",
                      " --stack ",
                      { "Ref": "AWS::StackName" },
                      " --resource SonarqubeEC2",
                      {
                        "Fn::If": [
                          "AssignInstanceRole",
                          {
                            "Fn::Join": [
                              "",
                              [
                                " --role ",
                                { "Ref": "InstanceProfile" }
                              ]
                            ]
                          },
                          ""
                        ]
                      },
                      {
                        "Fn::If": [
                          "UseCfnUrl",
                          {
                            "Fn::Join": [
                              "",
                              [
                                " --url ",
                                { "Ref": "CfnEndpointUrl" }
                              ]
                            ]
                          },
                          ""
                        ]
                      }
                    ]
                  ]
                },
                "group": "root",
                "mode": "000400",
                "owner": "root"
              }
            },
            "install-updates": {
              "commands": {
                "10-install-updates": {
                  "command": "yum update -y"
                }
              }
            },
            "services": {
              "sysvinit": {
                "cfn-hup": {
                  "enabled": "true",
                  "ensureRunning": "true",
                  "files": [
                    "/etc/cfn/cfn-hup.conf",
                    "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
                  ]
                }
              }
            }
          }
        }
      },
      "Properties": {
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/sda1",
            "Ebs": {
              "DeleteOnTermination": "true",
              "VolumeSize": "20",
              "VolumeType": "gp2"
            }
          },
          {
            "Fn::If": [
              "CreateAppVolume",
              {
                "DeviceName": { "Ref": "AppVolumeDevice" },
                "Ebs": {
                  "DeleteOnTermination": "true",
                  "VolumeSize": { "Ref": "AppVolumeSize" },
                  "VolumeType": { "Ref": "AppVolumeType" }
                }
              },
              { "Ref": "AWS::NoValue" }
            ]
          }
        ],
        "IamInstanceProfile": {
          "Fn::If": [
            "AssignInstanceRole",
            { "Ref": "InstanceProfile" },
            { "Ref": "AWS::NoValue" }
          ]
        },
        "ImageId": { "Ref": "AmiId" },
        "InstanceType": { "Ref": "InstanceType" },
        "KeyName": { "Ref": "KeyPairName" },
        "NetworkInterfaces": [
          {
            "AssociatePublicIpAddress": {
              "Fn::If": [
                "AssignPublicIp",
                "true",
                "false"
              ]
            },
            "DeviceIndex": "0",
            "GroupSet": { "Ref": "SecurityGroupIds" },
            "SubnetId": { "Ref": "SubnetIds" }
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  { "Ref": "AWS::StackName" }
                ]
              ]
            }
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#cloud-config\n",
                "\n",
                "system_info:\n",
                "  default_user:\n",
                "    name: ",
                { "Ref": "ProvisionUser" },
                "\n",
                "\n",
                "hostname: ",
                { "Ref": "Hostname" },
                "\n",
                "fqdn: ",
                { "Ref": "Hostname" },
                ".",
                { "Ref": "Domainname" },
                "\n",
                "manage_etc_hosts: true\n",
                "\n",
                "users:\n",
                "  - default\n",
                "  - name: ",
                           { "Ref": "SonarUser" },
                           "\n",
                "    lock-passwd: True\n",
                "    shell: /bin/true\n",
                "\n",
                "bootcmd:\n",
                "  - cloud-init-per instance mkfs-appvolume mkfs -t ext4 ",
                { "Ref": "AppVolumeDevice" },
                "\n",
                "\n",
                "mounts:\n",
                "  - [ ",
                "\"",
                { "Ref": "AppVolumeDevice" },
                "\", ",
                "\"",
                { "Ref": "AppVolumeMountPath" },
                "\", ",
                "\"auto\" ",
                "]\n",
                "\n",
                "packages:\n",
                "  - postgresql\n",
                "  - postgresql-jdbc\n",
                "  - unzip\n",
                "\n",
                "runcmd:\n",
                "  - |-\n",
                "      # Export cert bundle ENVs\n",
                "      export AWS_CA_BUNDLE=/etc/pki/tls/certs/ca-bundle.crt\n",
                "      export REQUESTS_CA_BUNDLE=/etc/pki/tls/certs/ca-bundle.crt\n",
                "      \n",
                "      # Set up envs used by build-scripts\n",
                "      export SONARQUBE_S3_BACKUP=\"",
                       { "Ref": "BackupBucket" },
                       "\"\n",
                "      export SONARQUBE_DBUSER=\"",
                       { "Ref": "SonarDbUser" },
                       "\"\n",
                "      export SONARQUBE_DBPASS=\"",
                       { "Ref": "SonarDbPass" },
                       "\"\n",
                "      export SONARQUBE_DBHOST=\"",
                       { "Ref": "SonarDbHost" },
                       "\"\n",
                "      export SONARQUBE_DBINST=\"",
                       { "Ref": "SonarDbInst" },
                       "\"\n",
                "      export SONAR_USER=\"",
                       { "Ref": "SonarUser" },
                       "\"\n",
                "      export SONARQUBE_ZIP=\"",
                       { "Ref": "SonarSrcUrl" },
                       "\"\n",
                "      \n",
                "      # Helper function\n",
                "      function err_exit {\n",
                "         echo \"${1}\"\n",
                "         logger -p kern.crit -t UserData \"${1}\"\n",
                "         /opt/aws/bin/cfn-signal -e 1 --stack ",
                { "Ref": "AWS::StackName" },
                " --resource SonarqubeEC2\n",
                "         exit 1\n",
                "      }\n",
                "      \n",
                "      # Install RPMs needed by the cfn-tools.\n",
                "      yum --enablerepo=",
                       { "Ref": "EpelRepo" },
                       " install -y ",
                       { "Ref": "PyStache" },
                       " ",
                       { "Ref": "PipRpm" },
                       " || err_exit 'Could not install Cfn dependencies.'\n",
                "      \n",
                "      # Do pip-stuff\n",
                "      pip install -i ",
                       { "Ref": "PipIndexFips" },
                       " --upgrade pip\n",
                "      \n",
                "      # Initialize the Cfn subsystems\n",
                "      /opt/aws/bin/cfn-init -s ",
                       { "Ref": "AWS::StackName" },
                       " -r SonarqubeEC2 ",
                       " --region ",
                       { "Ref": "AWS::Region" },
                       " && echo 'Successfully ran cfn-init'",
                       " || err_exit 'Failed to run cfn-init' > /dev/stderr\n",
                "      \n",
                "      # Add admin SSH keys to the ",
                       { "Ref": "ProvisionUser" },
                       " account\n",
                "      export PROVHOME=/home/",
                       { "Ref": "ProvisionUser" },
                       "\n",
                "      if [[ ! -d ${PROVHOME}/.ssh ]]\n",
                "      then\n",
                "         printf \"Waiting for ${PROVHOME}/.ssh to be created\"\n",
                "         while [[ ! -d ${PROVHOME}/.ssh ]]\n",
                "         do\n",
                "            printf \".\"\n",
                "            sleep 5\n",
                "         done\n",
                "         echo \"Found.\"\n",
                "      fi\n",
                "      \n",
                "      curl -skL ",
                       { "Ref": "AdminPubkeyURL" },
                       " >> ${PROVHOME}/.ssh/authorized_keys || ",
                       "err_exit 'Failed to install admin-users keys'\n",
                "      \n",
                "      # Save off critical template parms\n",
                "      if [[ -d /etc/cfn ]]\n",
                "      then\n",
                "         env | grep SONAR > /etc/cfn/Sonarqube.envs\n",
                "      else\n",
                "         err_exit 'Missing CFn directory: cannot save envs'\n",
                "      fi\n",
                "      \n",
                "      # Ensure SEL-mode is dialed-back\n",
                "      if [[ $(getenforce) = Enforcing ]]\n",
                "      then\n",
                "         printf 'Relaxing SELINUX mode... '\n",
                "         sed -i '/^SELINUX=/s/=.*/=permissive/' /etc/selinux/config || \\n",
                "           err_exit 'Failed to update SEL config file'\n",
                "         setenforce 0 || err_exit 'Failed to set SEL to permissive'\n",
                "      else\n",
                "         echo 'SELinux already dialed back'\n",
                "      fi\n",
                "      \n",
                "      # Add local firewall exceptions\n",
                "      printf 'Adding firewall exception... '\n",
                "      firewall-cmd --add-port=9000/tcp --permanent\n",
                "      printf 'Reloading firewall config... '\n",
                "      firewall-cmd --reload\n",
                "      \n",
                "      # Ensure sonarqube can write to its directory\n",
                "      echo 'Setting ownership on Sonarqube directory'\n",
                "      chown ",
                           { "Ref": "SonarUser" },
                           ":",
                           { "Ref": "SonarUser" },
                           " ",
                           { "Ref": "AppVolumeMountPath" },
                       " || err_exit \"Failed to set correct ownership",
                       " on the sonarqube filesystem.\"\n",
                "      \n",
                "      # Fetch and configure Sonarqube\n",
                "      curl -o /tmp/sonar-setup.sh -skL ",
                       { "Ref": "SonarAppSetupUrl" },
                       "|| err_exit 'Failed to fetch Sonarqube setup script'\n",
                "      echo 'Running app installer/setup'\n",
                "      su -s /bin/bash ",
                          { "Ref": "SonarUser" },
                          " -c \"bash /tmp/sonar-setup.sh ",
                          { "Ref": "SonarSrcUrl" },
                          "\" || err_exit 'Sonarqube setup script failed.'\n",
                "      \n",
                "      curl -o /root/sqb_init_setup.sh -skL ",
                          { "Ref": "SonarInitSetupUrl" },
                          "\n",
                "      printf 'Running sysvinit setup... '\n",
                "      bash /root/sqb_init_setup.sh && echo \"Sucess.\"",
                       " || err_exit 'Failed running sysvinit setup'\n",
                "      \n",
                "      # Signal Cfn that we're good\n",
                "      /opt/aws/bin/cfn-signal -e 0 --stack ",
                       { "Ref": "AWS::StackName" },
                       " --resource SonarqubeEC2 --url ",
                       { "Ref": "CfnEndpointUrl" },
                       "\n"
              ]
            ]
          }
        }
      },
      "Type": "AWS::EC2::Instance"
    }
  }
}
